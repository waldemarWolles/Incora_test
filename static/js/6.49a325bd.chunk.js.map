{"version":3,"sources":["components/PostModal.js","pages/Posts.js"],"names":["useStyles","makeStyles","theme","root","width","titleInput","marginBottom","spacing","form","display","flexDirection","textAlign","form_input","height","form_input_textarea","form_input_button","alignSelf","padding","fontWeight","backgroundColor","indigo","borderRadius","PostModal","userId","id","title","body","currentAction","classes","React","useState","open","setOpen","useForm","register","handleSubmit","errors","dispatch","useDispatch","variant","color","onClick","onClose","onSubmit","data","e","updateCurrentPost","className","name","defaultValue","ref","type","required","exampleRequired","value","createPost","card","cardContent","flexGrow","buttons","justifyContent","postsTitle","Posts","props","useSelector","state","posts","currentPostsUser","match","params","gutterBottom","component","username","container","to","size","getPosts","map","post","index","item","xs","sm","md"],"mappings":"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","file":"static/js/6.49a325bd.chunk.js","sourcesContent":["import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateCurrentPost } from '../redux/currentPost-reducer'\r\nimport { useForm } from 'react-hook-form'\r\nimport { indigo } from '@material-ui/core/colors'\r\nimport { createPost } from '../redux/posts-reducer'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      width: '100%',\r\n    },\r\n  },\r\n  titleInput: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: '500px ',\r\n    textAlign: 'center',\r\n  },\r\n  form_input: {\r\n    marginBottom: theme.spacing(5),\r\n    height: theme.spacing(4),\r\n  },\r\n  form_input_textarea: {\r\n    marginBottom: theme.spacing(5),\r\n    height: theme.spacing(40),\r\n  },\r\n  form_input_button: {\r\n    alignSelf: 'center',\r\n    width: theme.spacing(10),\r\n    padding: theme.spacing(1),\r\n    fontWeight: 'bold',\r\n    backgroundColor: indigo[200],\r\n    borderRadius: '5px',\r\n  },\r\n}))\r\n\r\nexport const PostModal = ({ userId, id, title, body, currentAction }) => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const { register, handleSubmit, errors } = useForm()\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const onSubmitUpdate = (data, e) => {\r\n    dispatch(updateCurrentPost(userId, id, data.title, data.body))\r\n    setOpen(false)\r\n  }\r\n\r\n  const onSubmitCreate = (data, e) => {\r\n    dispatch(createPost(userId, data.title, data.body))\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        {currentAction}\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {currentAction === 'Edit' && (\r\n              <form\r\n                onSubmit={handleSubmit(onSubmitUpdate)}\r\n                className={classes.form}\r\n              >\r\n                <label>Title</label>\r\n                <input\r\n                  className={classes.form_input}\r\n                  name=\"title\"\r\n                  defaultValue={title}\r\n                  ref={register}\r\n                  type=\"text\"\r\n                />\r\n                <label>Body</label>\r\n                <textarea\r\n                  className={classes.form_input_textarea}\r\n                  name=\"body\"\r\n                  defaultValue={body}\r\n                  ref={register({ required: true })}\r\n                  type=\"input\"\r\n                />\r\n                {errors.exampleRequired && <p>This field is required</p>}\r\n\r\n                <input\r\n                  className={classes.form_input_button}\r\n                  type=\"submit\"\r\n                  value=\"Save\"\r\n                />\r\n              </form>\r\n            )}\r\n            {currentAction === 'Create a new post' && (\r\n              <form\r\n                onSubmit={handleSubmit(onSubmitCreate)}\r\n                className={classes.form}\r\n              >\r\n                <label>Title</label>\r\n                <input\r\n                  className={classes.form_input}\r\n                  name=\"title\"\r\n                  defaultValue=\"test\"\r\n                  ref={register}\r\n                  type=\"text\"\r\n                />\r\n                <label>Body</label>\r\n                <textarea\r\n                  className={classes.form_input_textarea}\r\n                  name=\"body\"\r\n                  ref={register({ required: true })}\r\n                  type=\"input\"\r\n                />\r\n                {errors.exampleRequired && <p>This field is required</p>}\r\n\r\n                <input\r\n                  className={classes.form_input_button}\r\n                  type=\"submit\"\r\n                  value=\"Save\"\r\n                />\r\n              </form>\r\n            )}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Grid,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport { PostModal } from '../components/PostModal'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getPosts } from './../redux/posts-reducer'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n  },\r\n\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    width: '100%',\r\n  },\r\n  postsTitle: {\r\n    textAlign: 'center',\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n}))\r\n\r\nexport const Posts = (props) => {\r\n  const classes = useStyles()\r\n\r\n  const { posts, currentPostsUser } = useSelector((state) => state.posts)\r\n\r\n  let id = +props.match.params.userId\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const refreshPosts = () => {\r\n    dispatch(getPosts(id))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Typography\r\n        className={classes.postsTitle}\r\n        gutterBottom\r\n        variant=\"h5\"\r\n        component=\"h2\"\r\n      >\r\n        Posts by: {currentPostsUser.username}\r\n      </Typography>\r\n      <Grid container spacing={4}>\r\n        <div className={classes.buttons}>\r\n          <Link to=\"/\">Go Back</Link>\r\n          <Button size=\"small\" color=\"primary\">\r\n            <PostModal userId={id} currentAction=\"Create a new post\" />\r\n          </Button>\r\n          <Button onClick={refreshPosts} size=\"small\" color=\"primary\">\r\n            Refresh\r\n          </Button>\r\n        </div>\r\n        {posts.map((post, index) => (\r\n          <Grid item key={post + index} id={index} xs={12} sm={12} md={12}>\r\n            <Card className={classes.card}>\r\n              <CardContent className={classes.cardContent}>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {posts[index].title}\r\n                </Typography>\r\n                <Typography>{posts[index].body}</Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Link\r\n                  to={`/post/${id}/${posts[index].id}`}\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                >\r\n                  Details\r\n                </Link>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}